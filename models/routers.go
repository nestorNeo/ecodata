/*
 * ecodata - OpenAPI 3.0
 *
 * API to store contamination events and data from different sources
 *
 * API version: 1.0.0
 * Contact: nestor.salvador@gdl.cinvestav.mx
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(middleware ...gin.HandlerFunc) *gin.Engine {
	globalRouter := gin.Default()
	// a new route for methods that need auth
	router := globalRouter.Group("/secure")

	for _, injection := range middleware {
		router.Use(injection)
	}

	// NOT FOUND ROUTE
	globalRouter.NoRoute(func(c *gin.Context) {
		c.Data(http.StatusNotFound, "text/html; charset=utf-8", []byte(NOTFOUND))
	})

	for _, publicRoute := range publicRoutes {
		switch publicRoute.Method {
		case http.MethodGet:
			globalRouter.GET(publicRoute.Pattern, publicRoute.HandlerFunc)
		case http.MethodPost:
			globalRouter.POST(publicRoute.Pattern, publicRoute.HandlerFunc)
		case http.MethodPut:
			globalRouter.PUT(publicRoute.Pattern, publicRoute.HandlerFunc)
		case http.MethodPatch:
			globalRouter.PATCH(publicRoute.Pattern, publicRoute.HandlerFunc)
		case http.MethodDelete:
			globalRouter.DELETE(publicRoute.Pattern, publicRoute.HandlerFunc)
		}
	}

	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return globalRouter
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.Data(http.StatusOK, "text/html; charset=utf-8", []byte(INDEXCONTENT))
}

// public routes are static no middleware
var publicRoutes = Routes{
	{
		"Index",
		http.MethodGet,
		"/",
		Index,
	},

	{
		"LoginUser",
		http.MethodGet,
		"/user/login",
		LoginUser,
	},
}

var routes = Routes{
	{
		"CreateBundle",
		http.MethodPost,
		"/api/v1/bundle",
		CreateBundle,
	},

	{
		"GetBundleStatus",
		http.MethodGet,
		"/api/v1/bundle/:bundleId",
		GetBundleStatus,
	},

	{
		"CreateUser",
		http.MethodPost,
		"/api/v1/user",
		CreateUser,
	},

	{
		"CreateUsersWithListInput",
		http.MethodPost,
		"/api/v1/user/createWithList",
		CreateUsersWithListInput,
	},

	{
		"DeleteUser",
		http.MethodDelete,
		"/api/v1/user/:username",
		DeleteUser,
	},

	{
		"GetUserByName",
		http.MethodGet,
		"/api/v1/user/:username",
		GetUserByName,
	},
	{
		"UpdateUser",
		http.MethodPut,
		"/api/v1/user/:username",
		UpdateUser,
	},
	{
		"LogoutUser",
		http.MethodGet,
		"/api/v1/user/logout",
		LogoutUser,
	},
}
