/*
 * ecodata - OpenAPI 3.0
 *
 * API to store contamination events and data from different sources
 *
 * API version: 1.0.0
 * Contact: nestor.salvador@gdl.cinvestav.mx
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"flag"
	"log"
	"time"

	"github.com/gin-gonic/gin"
	ginsession "github.com/go-session/gin-session"

	"github.com/go-co-op/gocron"
	"github.com/nestorneo/ecodata/collectors"
	"github.com/nestorneo/ecodata/config"
	"github.com/nestorneo/ecodata/middleware"
	sw "github.com/nestorneo/ecodata/models"
	"github.com/nestorneo/ecodata/security"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var (
	err         error
	userCfgFile string
	localConfig = config.DefaultConfig()
)

func init() {
	flag.StringVar(
		&userCfgFile, "config", "", "please provide server config")
}

func main() {
	log.Printf("Server started")
	flag.Parse()
	var (
		client    *mongo.Client
		validator *security.Validator
	)

	if userCfgFile != "" {
		log.Println("user provided config .... validating")
		localConfig, err = config.GetConfigFromFile(userCfgFile)
	}

	if err != nil {
		log.Panicln(err)
	}

	// MIDDLEWARES
	middlewares := []gin.HandlerFunc{
		ginsession.New(),
		middleware.GuidMiddleware(),
		middleware.TempStorage(
			localConfig.PrefixForTempFile,
			localConfig.StagingArea,
		),
	}

	if localConfig.AuthEnable {
		validator, err = security.NewValidator(localConfig.AuthSignKey, localConfig.AuthSignKey+".pub")
		if err != nil {
			log.Panic(err)
		}
		middlewares = append(middlewares, validator.AuthMiddleware())

	}

	if localConfig.DBAccess.Enable {
		log.Println("CONFIGURING DB")
		var ctx = context.TODO()
		clientOptions := options.Client().ApplyURI(localConfig.DBAccess.Connection)
		client, err = mongo.Connect(ctx, clientOptions)
		if err != nil {
			log.Fatal(err)
		}
	} else {
		log.Println("DRY RUN NO DB !!!!!")
	}

	// recurrent activities
	worker, err := collectors.NewCollector(*localConfig, client)
	if err != nil {
		log.Fatalln(err)
	}

	go func() {
		s := gocron.NewScheduler(time.UTC)
		s.Every(10).Seconds().SingletonMode().Do(worker.Run)
		s.StartBlocking()
	}()

	// middlewares
	// what is a middleware is an injector before reaching the actual endpoint it
	// pre-sets intended actions
	router := sw.NewRouter(
		middlewares...,
	)

	if localConfig.Security {
		log.Fatal(
			router.RunTLS(localConfig.Address, localConfig.SecurityCert, localConfig.SecurityKey),
		)
	} else {
		log.Fatal(router.Run(
			localConfig.Address))
	}
}
